
/*!

\file

\brief Интерфейс сторонних модулей - реализаций алгоритмов

В пользовательских модулях необходимо реализовать следующие функции:

- init();
- destroy();
- run();
- get_name();
- get_type();
- get_value();
- set_value().

Следующие функции являются служебными и предоставляются стендом для пользовательских модулей:

- create_image();
- delete_image().

*/

#ifndef INTERFACE_HPP
#define INTERFACE_HPP

extern "C"
{
	/*! \brief Типы входных и выходных параметров алгоритма */
	enum e_type
	{
		/*! Целое (int) */
		INT_TYPE = 0,

		/*! Вещественное двойной точности (double) */
		DOUBLE_TYPE = 1,

		/*! Изображение (s_image *) */
		IMAGE_TYPE = 2
	};

	/*!
	
	\brief Описатель изображения

	Изображение может иметь произвольное количество каналов.

	Каждый канал изображения должен быть восьмибитным беззнаковым.

	*/
	struct s_image
	{
		/*! Количество строк пикселей */
		unsigned height;

		/*! Количество столбцов пикселей */
		unsigned width;

		/*! Количество спектральных каналов */
		unsigned ch_num;

		/*! Массив пикселей */
		uint8_t * data;

		/*! Указатель на OpenCV Mat */
		void * mat;

		// TODO Указатель на OpenCV IplImage

		/*! \cond HIDDEN_SYMBOLS */

			void * _img; // Указатель на CImage

		/*! \endcond */
	};

	// ############################################################################
	// Служебные функции
	
	/*!

	\brief Создание изображения

	\param height - количество строк в изображении;
	\param width - количество столбцов в изображении;
	\param ch_num - количество каналов в изображении.

	\return указатель на созданное изображение - в случае успешного создания изображения;
	\return NULL - в случае, если создать изображение не удалось.

	*/
	s_image * create_image(const unsigned height, const unsigned width, const unsigned ch_num);

	/*!
	
	\brief Удаление изображения

	\param img - указатель на описатель изображения.

	\return 0 - в случае успешного завершения операции;
	\return <> 0 - в случае неудачного завершения операции.
	*/
	int delete_image(const s_image * img);

	// ############################################################################ 
	// Интерфейс модуля

	/*!

	\brief Инициализация модуля

	\param module_name - строка, в которой будет возвращено название модуля;
	\param module_name_len - максимальное количество байт в названии модуля (считая конечный нулевой байт).
	\param param_num - указатель на целочисленную переменную, в которой должно быть возвращено количество параметров алгоритма, реализуемого модулем;
	\param return_value_num - указатель на целочисленную переменную, в которой должно быть возвращено количество значений, возвращаемых алгоритмом в вызывающую процедуру.

	\return 0 - в случае успешного завершения операции;
	\return <> 0 - в случае неудачного завершения операции.

	*/
	int init(char * module_name, const unsigned module_name_len, unsigned * param_num, unsigned * return_value_num);

	/*!

	\brief Деструктор модуля

	\return 0 - в случае успешного завершения операции;
	\return <> 0 - в случае неудачного завершения операции.

	*/
	int destroy();

	/*!

	\brief Запуск алгоритма на выполнение

	\return 0 - в случае успешного завершения операции;
	\return <> 0 - в случае неудачного завершения операции.

	*/
	int run();

	// ############################################################################ 
	// Параметры и возвращаемые значения алгоритма

	/*!

	\brief Получение имени внешней переменной алгоритма (параметра или возвращаемого значения)

	\param is_param - флаг обращения к внешней переменной алгоритма (true, если обращение производится к параметру алгоритма, false - если обращение производится к возвращаемому значению алгоритма);
	\param ind - индекс внешней переменной, считая от нуля;
	\param name - строка, в которой будет возвращено имя внешней переменной;
	\param name_len - максимальное количество байт (!) в имени внешней переменной (считая конечный нулевой байт).

	\return 0 - в случае успешного завершения операции;
	\return <> 0 - в случае неудачного завершения операции.

	*/
	int get_name(const bool is_param, const unsigned ind, char * name, const unsigned name_len);

	/*!

	\brief Получение типа внешней переменной алгоритма (параметра или возвращаемого значения)

	\param is_param - флаг обращения к внешней переменной алгоритма (true, если обращение производится к параметру алгоритма, false - если обращение производится к возвращаемому значению алгоритма);
	\param ind - индекс внешней переменной, считая от нуля;
	\param type - указатель на переменную, в которой будет возвращен индекс типа внешней переменной.

	\return 0 - в случае успешного завершения операции;
	\return <> 0 - в случае неудачного завершения операции.

	*/
	int get_type(const bool is_param, const unsigned ind, e_type * type);

	/*!

	\brief Получение фактического значения внешней переменной алгоритма (параметра или возвращаемого значения)

	\param is_param - флаг обращения к внешней переменной алгоритма (true, если обращение производится к параметру алгоритма, false - если обращение производится к возвращаемому значению алгоритма);
	\param ind - индекс внешней переменной алгоритма, считая от нуля;
	\param value - указатель на переменную, в которую будет сохранено фактическое значение внешней переменной алгоритма.

	\return 0 - в случае успешного завершения операции;
	\return <> 0 - в случае неудачного завершения операции.

	*/
	int get_value(const bool is_param, const unsigned ind, void * value);

	/*!

	\brief Установ фактического значения внешней переменной алгоритма (параметра или возвращаемого значения)

	\param is_param - флаг обращения к внешней переменной алгоритма (true, если обращение производится к параметру алгоритма, false - если обращение производится к возвращаемому значению алгоритма);
	\param ind - индекс внешней переменной алгоритма, считая от нуля;
	\param value - указатель на переменную, хранящую фактическое значение внешней переменной алгоритма.

	\return 0 - в случае успешного завершения операции;
	\return <> 0 - в случае неудачного завершения операции.

	*/
	int set_value(const bool is_param, const unsigned ind, const void * value);
}

#endif

